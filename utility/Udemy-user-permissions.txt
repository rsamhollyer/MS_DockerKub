
Utility Containers and Linux
114 upvotes
Scott · Lecture 110 · 1 year ago
This is truly an awesome course Max! Well done!

I wanted to point out that on a Linux system, the Utility Container idea doesn't quite work as you describe it.  In Linux, by default Docker runs as the "Root" user, so when we do a lot of the things that you are advocating for with Utility Containers the files that get written to the Bind Mount have ownership and permissions of the Linux Root user.  (On MacOS and Windows10, since Docker is being used from within a VM, the user mappings all happen automatically due to NFS mounts.)

So, for example on Linux, if I do the following (as you described in the course):

Dockerfile -----

FROM node:14-slim
WORKDIR /app

--------

$ docker build -t node-util:perm .

$ docker run -it --rm -v $(pwd):/app node-util:perm npm init

...

$ ls -la

total 16

drwxr-xr-x  3 scott scott 4096 Oct 31 16:16 ./

drwxr-xr-x 12 scott scott 4096 Oct 31 16:14 ../

drwxr-xr-x  7 scott scott 4096 Oct 31 16:14 .git/

-rw-r--r--  1 root  root   202 Oct 31 16:16 package.json

You'll see that the ownership and permissions for the package.json file are "root".  But, regardless of the file that is being written to the Bind Mounted volume from commands emanating from within the docker container, e.g. "npm install", all come out with "Root" ownership.

-------

Solution 1:  Use  predefined "node" user (if you're lucky)

There is a lot of discussion out there in the docker community (devops) about security around running Docker as a non-privileged user (which might be a good topic for you to cover as a video lecture - or maybe you have; I haven't completed the course yet).  The Official Node.js Docker Container provides such a user that they call "node". 

https://github.com/nodejs/docker-node/blob/master/Dockerfile-slim.template

FROM debian:name-slim
RUN groupadd --gid 1000 node \
         && useradd --uid 1000 --gid node --shell /bin/bash --create-home node

Luckily enough for me on my local Linux system, my "scott" uid:gid is also 1000:1000 so, this happens to map nicely to the "node" user defined within the Official Node Docker Image.

So, in my case of using the Official Node Docker Container, all I need to do is make sure I specify that I want the container to run as a non-Root user that they make available.  To do that, I just add:

Dockerfile -----

FROM node:14-slim
USER node
WORKDIR /app

--------

If I rebuild my Utility Container in the normal way and re-run "npm init", the ownership of the package.json file is written as if "scott" wrote the file.

$ ls -la

total 12

drwxr-xr-x  2 scott scott 4096 Oct 31 16:23 ./

drwxr-xr-x 13 scott scott 4096 Oct 31 16:23 ../

-rw-r--r--  1 scott scott 204 Oct 31 16:23 package.json

------------

Solution 2:  Remove the predefined "node" user and add yourself as the user

However, if the Linux user that you are running as is not lucky to be mapped to 1000:1000, then you can modify the Utility Container Dockerfile to remove the predefined "node" user and add yourself as the user that the container will run as:

-------

FROM node:14-slim

RUN userdel -r node

ARG USER_ID

ARG GROUP_ID

RUN addgroup --gid $GROUP_ID user

RUN adduser --disabled-password --gecos '' --uid $USER_ID --gid $GROUP_ID user

USER user

WORKDIR /app

-------

And then build the Docker image using the following (which also gives you a nice use of ARG):

$ docker build -t node-util:cliuser --build-arg USER_ID=$(id -u) --build-arg GROUP_ID=$(id -g) .



And finally running it with:

$ docker run -it --rm -v $(pwd):/app node-util:cliuser npm init

$ ls -la

total 12

drwxr-xr-x  2 scott scott 4096 Oct 31 16:54 ./

drwxr-xr-x 13 scott scott 4096 Oct 31 16:23 ../

-rw-r--r--  1 scott scott  202 Oct 31 16:54 package.json



Reference to Solution 2 above: https://vsupalov.com/docker-shared-permissions/



Keep in mind that this image will not be portable, but for the purpose of the Utility Containers like this, I don't think this is an issue at all for these "Utility Containers"

13 replies
JE
Jim
0 upvotes
1 year ago
Oh man, only 55 lectures to go before I get to see this.

I have encountered this on our AWS ECS deployments. We create an unprivileged user account as part of the Docker build process, just like you have documented here. Then the app runs under the user account and not as root.


Maximilian — Instructor
24 upvotes
1 year ago
Hi Scott!

That's amazing, thank you so much for bringing this up and sharing this! I'll definitely a note regarding that to the "Utility Containers" section.

In general, I considered diving deeper into users, container security etc. but for the moment decided against it to focus more on the general "how to use Docker" topics. But this is definitely important and hence I'll add it.

Much appreciated!

Max

RA
raymi
0 upvotes
1 year ago
The php volumes in docker compose config in "Adding PHP Container" section should have been "cached" instead of "delegated" because most often changes come from the host side for dev and "read-only" is mostly on containers side. Please let me know.. what you reckon ? agree or disagree and reasons or I missed something ? just providing a feedback for improvement. love the course and keep it up Max


Maximilian — Instructor
2 upvotes
1 year ago
Hi!

Thanks for the nice feedback and sharing your thoughts!

Here's a good comparison of delegated vs cached: https://tkacz.pro/docker-volumes-cached-vs-delegated/

I favor delegated here because we don't need container writes (primarily log files) to be reflected back onto our host machine immediately. That's not important here. We do definitely need to ensure that changes on the host machine are immediately reflected inside of the container though.

Max

PM
Peter
0 upvotes
1 year ago
Wow Scott ! I've hit the jackpot with your helpful posting - thanks ! I did this course hoping to get a PRO solution for creating an unprivileged dockerized app user plus group. Thanks Max for the course so far - amazing !


Volkoff
10 upvotes
1 year ago
Found nice TLDR tip on stackoverflow to make whole "delegated-cached" issue clear

Use cached: when the host performs changes, the container is in read only mode.
Use delegated: when docker container performs changes, host is in read only mode.
Use default: When both container and host actively and continuously perform changes on data.


sorry if you tell something about it after, im only on 107th lesson

NP
Ngoc Diep
0 upvotes
11 months ago
Hi Scott!

Your comment are awsome! Thank alot

JB
Jyotirmay
0 upvotes
9 months ago
Wow, It is awesome.. Thank you scott. This is what I was facing with bind mounts and I was going into the container & chowning the files to fix this...!!


Alexander
0 upvotes
8 months ago
Scott amazing comment, with problem description, context description and solutions. Thanks!

AM
Agostinho
0 upvotes
6 months ago
if you  installed your node ( without nvm or brew) where you host machine is linux or macOS, to run npm you will need always add sudo before do npm init or install.

So this a normal issue in Unix base OS.

like i already said in lesson 107, it is important to exist a section about linux because all image are based in linux.

TB
Tolga
0 upvotes
6 months ago
Thanks Scott & Volkoff - Your posts are really really helpful!


Paul
2 upvotes
4 months ago
To make it more convenient to run Docker commands from a terminal without have to always use “sudo”, I followed the instructions at Manage Docker as non-root user

I am using VSCode SSH connected to a Linux server.

For information on VSCode SSH see Remote Development using SSH . I didn’t have to change anything on the server, since it already supported SSH. I just installed the Remote Development Extension Pack into VSCode.

After all of this, I haven't had any permission problems in any of the modules in this course so far.

MC
Martin
0 upvotes
1 month ago
Thanks Scott! Great comment! :-)